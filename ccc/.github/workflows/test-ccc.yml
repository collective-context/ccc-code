name: Test CCC Production

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'ccc/**'
      - 'tests/**'
      - 'pyproject.toml'
  pull_request:
    paths:
      - 'ccc/**'
      - 'tests/**'
      - 'pyproject.toml'
  workflow_dispatch:

jobs:
  test:
    name: Test CCC on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Install dependencies
        run: |
          cd ccc
          uv venv .venv
          source .venv/bin/activate
          uv pip install -e ".[dev]"
      
      - name: Run tests
        run: |
          cd ccc
          source .venv/bin/activate
          pytest -v --cov=ccc --cov-report=xml
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./ccc/coverage.xml
          flags: ccc
      
      - name: Test CLI commands
        run: |
          cd ccc
          source .venv/bin/activate
          ccc --version
          ccc --help
          ccc info
          ccc status

  lint:
    name: Lint CCC Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Install dependencies
        run: |
          cd ccc
          uv venv .venv
          source .venv/bin/activate
          uv pip install -e ".[dev]"
      
      - name: Run black
        run: |
          cd ccc
          source .venv/bin/activate
          black --check ccc/ tests/
      
      - name: Run flake8
        run: |
          cd ccc
          source .venv/bin/activate
          flake8 ccc/ tests/
      
      - name: Run isort
        run: |
          cd ccc
          source .venv/bin/activate
          isort --check-only ccc/ tests/
